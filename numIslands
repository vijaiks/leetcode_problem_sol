'''
<--Number of Islands-->
  --------------------
  Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. 
  An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.
  You may assume all four edges of the grid are all surrounded by water.
  
  Example 1:
      Input:
			11110
			11010
			11000
			00000
		Output: 1
  
  Example 2:
  
	Input:
			11000
			11000
			00100
			00011
		Output: 3
		
'''
from typing import List
def numIslands (grid: List[List[str]]) -> int:
        n_row = len(grid)        
        if n_row == 0:
            return 0        
        n_col= len(grid[0])
        count = 0       
        for r in range(n_row):
            for c in range(n_col):
                if grid[r][c] == '1':                    
                    count = count +1
					#invoke dfs on this node
                    dfs(grid, r, c)
                    
        return count       
    
#dfs on specific node
def dfs (grid: List[List[str]], row, col):
    n_row = len(grid)       
    n_col = len(grid[0])        
    #set 1 to zero in grid
    grid[row][col] = '0'
    
	#explore connected graph
	#up direction
    if (row-1) >= 0 and grid[row-1][col] == '1':
        dfs(grid, row-1, col)
	#down direction
    if (row+1) < n_row and grid[row+1][col] == '1':
        dfs(grid, row+1, col)
	#left
    if (col-1) >= 0 and grid[row][col-1] == '1':
        dfs(grid, row, col-1)
	#right
    if (col+1) < n_col and grid[row][col+1] == '1':
       dfs(grid, row, col+1)    

   
if __name__ == "__main__":
	grid = [["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","1"]]	
	print(numIslands(grid))
	
